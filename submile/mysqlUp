分层架构
	它的架构可以在多种不同场景中应用并发挥良好作用、主要体现在存储引擎的架构上。插件式的存储引擎架构将查询处理和其他的系统任务以及数据的存储提取分离。这种架构可以根据业务的需求和实际需求选择合适的存储引擎。

										Connectors
				Native C API , JDBC , ODBC , .NET , PHP , Pyhton , Pluby , Cobol

									   MySQL Server
				Management Servlces|			Conection Pool
				Utilitles|		SQL Interface , Parser , Optimlzer , Caches & Buffers

								Pluggable Storage Englnes
				MyISAM , InnoDB , NDB , Archive , Federated , Memory , Marge , Partner...	

										Files
				File System , Files & logs

	1. Connectors(连接层)
		最上层是一些客户端和连接服务，包含本地sock通信和大多数基于客户端/服务端工具实现的类似于tcp/ip的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层.上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。
	2. MySql Server(服务层)
		第二层架构主要完成大多少的核心服务功能，如SQL 接口，并完成缓存的查询，SQL的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定查询表的顺序,是否利用索引等，最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。
	3. Pluggable Storage Englnes(引擎层)
		存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。后面介绍MyISAM和InnoDB。
	4. Files(存储层)
		数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互


MyISAM 和 InnoDB 比较
	对比项			MyISAM							InnoDB
	主外键			不支持							支持
	事物				不支持							支持
	行表锁			表锁，即使操作一条记录也会锁		行锁,操作时只锁某一行，
					住整个表，不适合高并发的操作		不对其它行有影响，适合高并发的操作
	缓存				只缓存索引、不缓存真实数据。		不仅缓存索引还要缓存真实数据，对内存要求较高，
													而且内存大小对性能有决定性的影响
	表空间			小								大
	关注点			性能								事物
	默认安装			Y								Y




SQL执行加载顺序
	select			7
	from 			1
	inner join 		3
	on				2
	where 			4
	group by		5
	having 			6
	order by 		8
	limlt			9



JOIN的分类
	A B 两个表。
		1. 查询A,B 相同的数据。
			select * from A inner join B on A.Key = B.key;
		2. 查询A表的全部,如果B表有则输出没有则输出NULL。
			select * from A left join B on A.Key = B.key;
		3. 查询B表的全部,如果A表有则输出没有则输出NULL。
			select * from A right join B on A.Key = B.key;
		4. 查询A表中跟B表不相同的数据。
			select * from A left join B on A.Key = B.key where B is null;
		5. 查询B表中跟A表不相同的数据。
			select * from A right join B on A.Key = B.key where A is null;
		6. 查询AB表的全部数据,相同的去重。
			select * from A full touer join B on A.Key = B.key;	(Mysql中不支持full outer)
			select * from A left join B on A.Key = B.Key union select * from A right join B on A.Key = B.Key;	(union自带去重功能)
		7. 查询AB两个表中不相同的数据。
			select * from A full touer join B on A.Key = B.key where A.key is null or B.Key is null;	(Mysql中不支持full outer)
			select * from A left join B on A.Key = B.Key where B.key is null union select * from A right join B on A.Key = B.Key A.key is null;	(union自带去重功能)


索引
	官方定义: 索引(index) 是帮助MySQL高效的获取数据的数据结构。		本质: 索引是数据结构。		可以理解为 排好序的快速查找数据结构。
		数据本身之外，数据库还维护着一个满足特定查找算法的数据结构，这些数据结构以某种方式指向数据,
		这样就可以在这些数据结构的基础上实现高级查找算法，这种数据结构就是索引。

	索引本身也很大、不可能全部存储在内存中、因此索引往往以索引文件的形式存储在磁盘上。

	索引如果没有特别指明，都是值B树(多路搜索树,并不一定是二叉树)结构组织的索引。其中聚集索引、次要索引、覆盖索引、复合索引、前缀索引、唯一索引
	默认都是使用B+树索引，通常索引。

	优势:
		提高数据检索的效率、降低数据库的IO成本。降低数据排序的成本、降低了CPU的消耗。

	劣势:
		实际上索引也是一-张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占用空间的。
		虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。
		索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立最优秀的索引、或优化查询。

	适合创建索引的条件:
		1.主键自动建立唯.一索引
		2.频繁作为查询条件的字段应该创建索引
		3.查询中与其它表关联的字段，外键关系建立索引
		4.频繁更新的字段不适合创建索引
		5.Where条件里用不到的字段不创建索引
		6.单键/组合索引的选择问题，who? (在高并发下倾向创建组合索引)
		7.查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度
		8.查询中统计或者分组字段

	不适合创建索引的条件:
		1.表记录太少
		2.经常增删改的表
		3.数据重复且分布平均的表字段，因此应该只为最经常查询和最经常排序的数据列建立索引。
			数据列包含许多重复的内容，为它建立索引就没有太大的实际效果

	MySql的常见瓶颈:
		CPU:CPU在饱和的时候一“般发生在数据装入内存或从磁盘.上读取数据时候
		IO:磁盘I/O瓶颈发生在装入数据远大于内存容量的时候
		服务器硬件的性能瓶颈:top,free,iostat和vmstat来查看系统的性能状态

	覆盖索引: 
		(Covering Index) 也有人称索引覆盖。
		理解方式一: 就是select的数据列只用从索引中就能够取得，不必读取数据行，MySQL可以利用索引返回select列表中的字段，
			而不必根据索引再次读取数据文件,换句话说查询列要被所建的索引覆盖。
		
		理解方式二: 索引是高效找到行的一个方法，但是一般数据库也能使用索引找到一个列的数据，因此它不必读取整个行。
			毕竟索引叶子节点存储了它们索引的数据;当能通过读取索引就可以得到想要的数据，那就不需要读取行了。
			一个索引包含了(或覆盖了)满足查询结果的数据就叫做覆盖索引。

		注意： 
			如果要使用覆盖索引，一定要注意select列表中只取出需要的列，不可select *
			因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降。

	索引优化:
		通过分析EXPLAIN的结果。进行添加/删除索引。大胆假设、小心求证。
		定值、范围还是排序，一般orderby是给个范围
		group by基本.上都需要进行排序，会有临时表产生


		Join语句的优化:
			1. 尽可能减少Join语句中的NestedLoop的循环总次数;“ 永远用小结果集驱动大的结果集”。
			2. 优先优化NestedLoop的内层循环; .
			3. 保证Join语句中被驱动表上Join条件字段已经被索引;
			4. 当无法保证被驱动表的Join条件字段被索引且内存资源充足的前提下，不要太吝惜JoinBuffer的设置;

		一般性建议:
			对于单键索引，尽量选择针对当前query过滤性更好的索引。
			在选择组合索引的时候，当前Query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。
			在选择组合索引的时候，尽量选择可以能够包含当前query中的where字句中更多字段的索引。
			尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的。


	索引失效:
			常见的十种原因:
				1. 全值匹配我最爱
				2. 最佳左前缀法则		如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。
				3. 不在索引列上做任何操作(计算、函数、(自动or手动)类型转换)，会导致索引失效而转向全表扫描
				4. 存储引擎不能使用索引中范围条件右边的列
				5. 尽量使用覆盖索引(只访问索引的查询(索引列和查询列一致))，减少select *
				6.  mysq|在使用不等于(!= 或者 <> )的时候无法使用索引会导致全表扫描
				7.  is null ,is not null也无法使用索引
				8.  like以通配符开头('%abc... ')mysql索引失效会变成全表扫描的操作
				9. 字符串不加单引号索引失效
			   10. 少用or,用它来连接时会索引失效

			    全值匹配我最爱，最左前缀要遵守;
				带头大哥不能死，中间兄弟不能断;
				索引列上少计算，范围之后全失效;
				LIKE百分写最右，覆盖索引不写星;
				不等空值还有or，索引失效要少用;
				VAR引号不可丢，SQL高级也不难!

			  实例:
			  	假设 index(a, b, c);
			  		select语句											索引是否使用
			  		select a = 3;										Y, 使用到a
			  		select a = 3 and b = 5;								Y, 使用到a, b
			  		select a = 3 and b = 5 and c = 4;					Y, 使用到a, b, c
			  		select b = 4 or b = 3 and c = 4 or c = 4;			N, a为使用找不都头，以及使用到了or
			  		select a = 3 and c = 5;								Y, 使用到a, c未使用, b中间断了
			  		select a = 3 and b > 4 and c = 5;					Y, 使用到a, b 、 b本身是一个范围。而c正好处于范围之后。范围之后索引失效。
			  		select a = 3 and b like 'kk%' and c = 5;			Y, 使用到a, b, c、 因b是常量开头所以不算范围。
			  		select a = 3 and b like '%kk' and c = 5;			Y, 使用到a 、 因b开头不确定不知道是一个还是多个所以无法使用。
			  		select a = 3 and b like '%k%' and c = 5;			Y, 同上
			  		select a = 3 and b like 'k%k%' and c = 5;			Y, 使用到a, b, c、 因b是常量开头所以不算范围。



EXPLAIN
	模拟优化器执行SQL查询语句，从而知道MySQL是如何处理你的SQL语句的。分析你的查询语句或是表结构的性能瓶颈

	语法:
		explain Sql查询语句;

	作用:
		表的读取顺序
		数据读取操作的操作类型
		哪些索引可以使用
		哪些索引被实际使用
		表之间的引用
		每张表有多少行被优化器查询

	执行计划包含的信息:
		id select_type table type possible_keys key key_len ref rows Extra

			id: select查询的序列号、包含一组数字、表示查询中执行select子句或操作表的顺序。
				case 1: id相同, 执行顺序由上而下。
				case 2: 如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行。
				case 3: id如果相同，可以认为是一组，从上往下顺序执行; 在所有组中，id值越大，优先级越高，越先执行。

			select_type: 查询类型。
				case 1: SIMPLE 		简单的select查询,查询中不包含子查询或者UNION。
				case 2: PRIMARY 	查询中若包含任何复杂的子部分，最外层查询则被标记为PRIMARY。
				case 3: SUBQUERY	在SELECT或WHERE列表中包含了子查询。
				case 4: DERIVED		在FROM列表中包含的子查询被标记为DERIVED(衍生)。MySQL会递归执行这些子查询,把结果放在临时表里。
				case 5: UNION 		若第二个SELECT出现在UNION之后，则被标记为UNION;若UNION包含在FROM子句的子查询中,外层SELECT将被标记为: DERIVED。
				case 6: UNION RESULT	从UNION表获取结果的SELECT。

			table: 显示本行数据是关于那张表的。

			type: 访问类型排列、显示查询使用了那种类型。
					ps: 从最好到最差依次是(常见) 	system > const > eq_ref > ref > range > index > ALL > NULL。 优化到至少range级别、最好ref
				case 1: system 		表只有一行记录(等于系统表), 这是const类型的特列, 平时不会出现。
				case 2: const 		表示通过索引一次就找到了,const用于比较primarykey或者unique索引。因为只匹配一行数据，所以很快
									如将主键置于where列表中，MySQL就能将该查询转换为一个常量
				case 3: eq_ref		唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描
				case 4: ref 		非唯一性索引扫描，返回匹配某个单独值的所有行.
									本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，
									它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体
				case 5: range		只检索给定范围的行,使用一个索引来选择行。key 列显示使用了哪个索引
									一般就 是在你的where语句中出现了between、<、>、in等的查询.
									这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束语另一点，不用扫描全部索引。
				case 6: index 		Full Index Scan,index与ALL区别为index类型只遍历索引树。这通常比ALL快，因为索引文件通常比数据文件小。
									(也就是说虽然ll和Index都是读全表，但index是 从索引中读取的，而all是 从硬盘中读的)
				case 7: ALL 		Full Table Scan，将遍历全表以找到匹配的行	
					

			possible_keys: 显示可能应用在这张表中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出，
							ps: 但不一定被查询实际使用。
			key: 实际使用的索引。如果为NULL。则没有使用到索引(没建索引、索引失效)。查询中若使用了覆盖索引，则该索引仅出现在key列表中。

			key_len: 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好
					 key_ len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_ len是根据表定义计算而得，不是通过表内检索出的。	

			ref: 显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值。

			rows: 根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数。

			Extra: 包含不适合在其他列中显示但十分重要的额外信息。
				case 1: Using filesort		说明mysq|会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取
											MySQL中无法利用索引完成的排序操作称为“文件排序"
				case 2: Using temporary		使了用临时表保存中间结果,MySQL在对查询结果排序时使用临时表。常见于排序orderby和分组查询groupby。
				case 3: Using index 		表示相应的select操作中使用了覆盖索引(Covering Index)， 避免访问了表的数据行，效率不错!
											如果同时出现usingwhere，表明索引被用来执行索引键值的查找;
											如果没有同时出现usingwhere，表明索引用来读取数据而非执行查找动作。
				case 4: Using where 		表明使用过了where过滤。
				case 5: Using join buffer 	表明使用了连接缓存。
				case 6: impossible where 	where子句的值肯定是false，不能用来获取任何元组。
				case 7: select tables optimized away	在没有GROUP BY子句的情况下，基于索引优化MIN/MAX操作或者
														对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，
														查询执行计划生成的阶段即完成优化。
				case 8: distinct			优化distinct操作，在找到第一匹配的元组后即停止找同样值的动作



查询截取分析
	分析:
		1. 观察，至少跑1天，看看生产的慢SQL情况。
		2. 开启慢查询日志，设置阈值，比如超过5秒的就是慢SQL，并将它抓出来。
		3. explain + 慢SQL分析 (能解决八成的问题)。
		4. show profile
		5. 运维经理 or DBA，进行SQL数据库的参数调优。

	总结:
		0. 优化查询。
		1. 慢查询的开启并捕获
		2. explain+慢SQL分析
		3. show profile查询SQL在Mysq1服务器里面的执行细节和生命周期情况
		4. SQL数据库服务器的参数调优。

	优化查询:
		永远小表驱动大表、 类似嵌套循环 Nested Loop。
			in 和 exists 的使用场景。		
				A 和 B表的 id 都具有索引	

				in: select * from where id in (select id from B)
					for select id from B
					for select * form A where A.id = B.id
						ps: 当B表的数据集必须小于A表的数据集时，用in优于exists。

				exists: select * from A where exists (select 1 from B where A.id = B.id)
					for select * from A
					for select * from B where A.id = B.id
						ps: 当A表的数据集小于B表的数据时，用exists优于in。

			order by关键字优化:
				ORDER BY 子句，尽量使用Index方式排序，避免使用FileSort方式排序。
					MySQL支持二种方式的排序，FileSort和Index， Index效率高、它指MySQL扫描索引本身完成排序。FileSort方式效率较低、无法使用索引、文件内部自我排序。
						Index出现的条件:
							ORDER BY 语句使用索引最左前列、	使用Where子句与Order by子句条件列组合满足索引最左前列。

				尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀。


				如果不在索引列上，fileSort有两种算法: mysq|就要启动双路排序和单路排序
					双路排序:
						MySQL4.1之前是使用双路排序,字面意思就是两次扫描磁盘，最终得到数据，读取行指针和orderby列，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出。
							从磁盘取排序字段，在buffer进行排序，再从磁盘取其他字段。

					单路排序:
						从磁盘读取查询需要的所有列，按照orderby列在buffer对它们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据。并且把随机I0变成了顺序IO,但是它会使用更多的空间，因为它把每一行都保存在内存中了。

				结论及引申出的问题:
					由于单路是后出的，总体而言好过双路。

					但是用单路有问题
						在sort_buffer中，方法B比方法A要多占用很多空间，因为方法B是把所有字段都取出,所以有可能取出的数据的总大小超出了sort__buffer的容量，导致每次只能取sort_ _buffer容量大小的数据，进行排序(创建tmp文件，多路合并)，排完再取取sort_ buffer容 量大小，再排..... 从而多次I/O。
						
						本来想省一次I/O操作，反而导致了大量的I/O操作，反而得不偿失。

				优化策略:
					1. Order by时select * 是一个大忌只Query需要的字段，这点非常重要。在这里的影响是:
						1.1当Query的字段大小总和小于max_length_for_sort_data而且排序字段不是TEXT|BLOB类型时，会用改进后的算法一单路排序，否则用老算法-多路排序。
						1.2两种算法的数据都有可能超出sort_buffer的容量，超出之后，会创建tmp文件进行合并排序，导致多次IO，但是用单路排序算法的风险会更大一些,所以要提高sort_ _buffer_ size.

					2.尝试提高sort_ buffer_ size
						不管用哪种算法，提高这个参数都会提高效率，当然，要根据系统的能力去提高，因为这个参数是针对每个进程的
					3.尝试提高max_ length_ for_ sort data
						提高这个参数，会增加用改进算法的概率。但是如果设的太高，数据总容量超出sort_ buffer_ size的概率就增大，明显症状是高的磁盘I/O活动和低的处理器使用率.


				为排序使用索引
					MySq|两种排序方式 :文件排序或扫描有序索引排序
					MySq|能为排序与查询使用相同的索引
					
					KEYa_b_c(a,b, c)
					order by能使用素引最左前缀
					- ORDER BY a
					- ORDER BY a, b
					- ORDER BY a, b, c
					- ORDER BY a DESC, b DESC, C DESC
					
					如果WHERE使用索引的最左前缀定义为常量,则order by能使用索引
					- WHERE a = const ORDER BY b, C
					- WHERE a = const AND b = const ORDER BY C
					- WHERE a = const ORDER BY b, C
					- WHERE a = const AND b > const ORDER BY b, C
					
					不能使用索引进行排序;
					- ORDER BY a ASC, b DESC, c DESC 	/* 排序不- -致*
					- WHERE g = const ORDER BY b, c		/* 丢失a素引*/
					- WHERE a = const ORDER BY c 		/* 丢失b素引*/
					- WHERE a = const ORDER BY a,d 		/* d不是素引的一部分*/ .
					- WHERE a in (...) ORDER BY b,c 	/* 对于排序来说,多个相等条件也是范围查询*/

			group by关键字优化:
				同order by。
				groupby实质是先排序后进行分组，遵照索引建的最佳左前缀
				当无法使用索引列，增大max_length_for_sort_data 参数的设置+增大sort_buffer_size参 数的设置
				where高于having，能写在where限定的条件就不要去having限定了。


	慢查询日志:
		MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。
		具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。long_query_time的默认值为10，意思是运行10秒以上的语句。
		由他来查看哪些SQL超出了我们的最大忍耐时间值，比如一条sq|执行超过5秒钟，我们就算慢SQL，希望能收集超过5秒的sql，结合之前explain进行全面分析。


		默认情况下，MySQL数据库没有开启慢查询日志，需要我们手动来设置这个参数。
		如果不是调优需要的话，般 不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件

		如何开启设置:
			查看: SHOW VARIABLES LIKE '%slow_query_log%'; 
			开启: set global slow_query_log = 1; // 本次会话开启

			查看现在多少秒算慢: SHOW VARIABLES LIKE 'long_query_time%';
			设置慢的阈值时间: set global long_query_time = time;		// 需要重新连接或重开一个会话才能看到修改后的值。

		在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow。

		mysqldumpslow帮助信息:
			mysqldumpslow [list] 查看的日志路径名; 
				item: --help	查看全局,
				ietm: -s 	 	是表示按照何种方式排序,
				item: -c 		访问次数,
				itme: -l 		锁定时间,
				item: -r:	 	返回记录,
				item: -t: 		查询时间,
				item: -al: 		平均锁定时间,
			 	item: -ar: 		平均返回记录数,
			 	item: -at: 		平均查询时间,
				item: -t: 		即为返回前面多少条的数据,
				item: -g [regular]: 		后边搭配一个正则匹配模式，大小写不敏感的。

			例子:
				得到返回记录集最多的10个SQL
					mysqldumpslow -s -r -t 10 地址。

				得到访问次数最多的10个SQL
					mysqldumpslow -s -c -t 10 地址。

				得到按照时间排序的前10条里面含有左连接的查询语句
					mysqldumpslow -s -t 10 -g "left join" 地址。
				
				另外建议在使用这些命令时结合|和more使用，否则有可能出现爆屏情况
					mysqldumpslow -s -r -t 10 地址。 | more


	Show Profile
		mysq|提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优的测量.
		默认情况下，参数处于关闭状态，并保存最近15次的运行结果。

		分析步骤:
			1. 是否支持，看看当前的mysq|版本是否支持。
				Show variables like 'profiling%';

			2. 开启功能，默认是关闭，使用前需要开启。
				set profiling = on;

			3. 运行SQL
				平常执行SQL

			4. 查看结果，show profiles, 执行的SQL语句;
				格式:
					Query_ID(查询的编号)  Duration(执行的时间)  Query(执行SQL语句)

			5. 诊断SQL，show profile cpu,block io for query Query_ID(show profiles里面的编号); 
				参数:
					ALL 				显示所有的开销信息
					BLOCK IO 			显示块IO相关开销
					CONTEXT SWITCHES	上下文切换相关开销
					CPU 				显示CPU相关开销信息
					IPC  				显示发送和接收相关开销信息
					MEM|ORY				显示内存相关开销信息
					PAGE FAULTS			显示页面错误相关开销信息
					SOURCE				显示和Source_ function, Source_ file， Source_ line相关的开销信息
					SWAPS				显示交换次数相关开销的信息
				格式:
					Status(种类) Duration(执行的时间)  CPU_user(用户占cpu的内存)  CPU_system(系统占cpu的内存) Block_ops_in(输入) Block_pos_out(输出)

			6. 日常开发需要注意的结论
				show profile cpu, block, io for query Query_ID的Statu危险的值.
					converting HEAP to MyISAM 		查询结果太大，内存都不够用了往磁盘上搬了。
					
					Creating tmp table 			创建临时表
						Copying to tmp table 	拷贝数据到临时表
						removing tmp table用完再删除

					Copying to tmp table on disk 		把内存中临时表复制到磁盘，危险! ! !

					locked


	全局查询日志:
		永远不要在生产环境开启这个功能。

		使用:
			开启: set global general_log = 1;
			输出: set glbbal log_output = 'TABLE';
			查看: select * from mysql.general_log;


大批量插入数据:
	MySQL自带保护机制、无法一次性插入大量的数据。需要配置才可以。
		创建函数，假如报错: This function has none of DETERMINISTI.....
		#由于开启过慢查询日志，因为我们开启了bin-log, 我们就必须为我们的function指定一个参数。
		查看: show variables like "log_ bin_trust_function_creators';
		设置: set global log_bin_trust_function_creators = 1;


锁机制:
	锁是计算机协调多个进程或线程并发访问某一资源 的机制。
	
	在数据库中，除传统的计算资源(如CPU、RAM、I/O等)的争用以外，数据也是-种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说	，锁对数据库而言显得尤其重要，也更加复杂。

	锁的分类:
		开销、加锁速度、死锁、粒度、并发性能。只能就具体应用的特点来说哪种锁更合适

		从对数据操作的类型(读\写)
			读锁(共享锁): 针对同一份数据，多个读操作可以同时进行而不会互相影响。
			写锁(排它锁): 当前写操作没有完成前，它会阻断其他写锁和读锁。

		从对数据操作的粒度分:
			表锁(偏读):
				特点: 偏向MyISAM存储引擎，开销小，加锁快;无死锁;锁定粒度大，发生锁冲突的概率最高,并发度最低。

				增加表锁:
					lock table tableName {read/write} [, tableName {read/write}] [, ...];

				解锁:
					unlock tables;

				效果: (MyISAM存储引擎)
					加read(读)锁:
						本身连接:
							1. 可以读取本表,		2. 不可以修改本表,			3. 不可以读取其他没有锁定的表。
						其他连接:
							1. 可以读取本表,		2. 可以读取或更新其他表,		3. 修改本表则会阻塞、至到(unlock)锁释放。

					加write(写)锁:
						自身连接:
							1. 可以读写本表,			2. 不可以读取其他表。
						其他连接:
							1. 可以读写其他表,		2. 读写本表会阻塞、至到(unlock)释放锁。 (如果可以则是本地MySQL缓存的数据。增加条件即可)。

				MyISAM在执行查询语句(SELECT) 前，会自动给涉及的所有表加读锁，在执行增删改操作前，会自动给涉及的表加写锁。MySQL的表级锁有两种模式:
					表共享读锁(Table Read Lock)
					表独占写锁(Table Write Lock)

				锁类型			可否兼容				读锁				写锁
				读锁				是 					是 				否
				写锁 			是 					否				否

				结论:
					1、对MyISAM表的读操作(加读锁)，不会阻塞其他进程对同一表的读请求， 但会阻塞对同-表的写请求。只有当读锁释放后,才会执行其它进程的写操作。
					2、对MyISAM表的写操作(加写锁)，会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作。

														读锁会阻塞写，但是不会堵塞读。而写锁则会把读和写都堵塞。

				分析:
					查看表上加的锁:
						show open tables;		1 = 有锁 , 0 = 没锁。

					如果分析表锁定:
						show stauts like 'table%'; 
							Table_locks_immediate: 产生表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值加1 ;
							Table_locks_waited: 出现表级锁定争用而发生等待的次数(不能立即获取锁的次数，每等待一次锁值加1)，此值高则说明存在着较严重的表级锁争用
											    情况;
											    
					Myisam的读写锁调度是写优先，这也是myisam不适合做写为主表的引擎。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞

			行锁(偏写):
				偏向InnoDB存储引擎， 开销大，加锁慢;会出现死锁;锁定粒度最小，发生锁冲突的概率最低,并发度也最高。
				InnoDB与MyISAM的最大不同有两点:一是支持事务(TRANSACTION) ;二是采用了行级锁。

				效果: (InnoDB存储引擎、并开启了事物 set autocommit = 0)
					MySQL默认事物是 可重复读(解决了 脏读、不可重复读)

					修改同一行:
						自身连接:
							1. 可以更新并立马看到、		2. 数据生效并其他连接可以读取，必须commit提交。
						其他连接:
							1. 企图更新则会被阻塞，至到操作的连接(commit)提交数据才可以更新、			2. 数据生效并其他连接可以读取，必须commit提交。

					修改不同行:
						不会出现阻塞。不过想要数据生效必须commit。

					修改多行:(范围)
						自身链接:
							1. 可以更新并立马看到、		2. 数据生效并其他连接可以读取，必须commit提交。
						其他连接:
							1. 企图更新则会被阻塞，至到操作的连接(commit)提交数据才可以更新、			2. 数据生效并其他连接可以读取，必须commit提交、	
							3. 往表中插入的数据正好在修改的范围内、则会阻塞，至到操作的连接(commit)提交数据才可以更新(间隙锁)。


				索引失效会导致行锁变为表锁 ！！！


				间隙锁:
					当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁;对于键值在条件范围内但并不存在的记录，叫做“间隙(GAP)” ，
					InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁(Next-Key锁) 。

					危害:
						因为Query执行过程中通过过范围查找的话，他会锁定整个范围内所有的索引键值，即使这个键值并不存在氏
						间隙锁有一个比较致命的弱点，就是当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键值范围内的任何数据。在某些场景下这可能会对性能造成很大的危害

				锁定一行:
					select xxx... for update; 锁定某一行后，其他的操作会被阻塞，直到锁定行的会话提交commit。

				总结:
					Innodb存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一些，但是在整体并发处理能力方面要远远优于MyISAM的表级锁定的。当系统并发量较高的时候，Innodb的整 体性能和MyISAM相比就会有比较明显的优势了。

					Innodb的行级锁定同样也有其脆弱的一面，当我们使用不当的时候，可能会Innodb的整体性能表现不仅不能比MyISAM高，甚至可能会更差。

					分析:
						命令: 
							show status like 'innodb_row_lock%';
						参数分析:
							Innodb_row_lock_current_waits: 	当前正在等待锁定的数量;
							Innodb_row_lock_time: 			从系统启动到现在锁定总时间长度;
							Innodb_row_lock_time_avg:		每次等待所花平均时间;
							Innodb_row_lock_timne_max:		从系统启动到现在等待最常的一次所花的时间;
							Innodb_row_lock_waits: 			系统启动后到现在总共等待的次数;

						对于这5个状态变量，比较重要的主要是
							Innodb_row_lock_time_avg ( 等待平均时长)，
							Innodb_row_lock_waits (等待总次数)
							Innodb_row_lock_time (等待总时长)这三项。
							尤其是当等待次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手指定优化计划。
								show porfile

					优化建议:
						1. 尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁。，
						2. 合理设计索引，尽量缩小锁的范围
						3. 尽可能较少检索条件，避免间隙锁
						4. 尽量控制事务大小，减少锁定资源量和时间长度
						5. 尽可能低级别事务隔离
		
			页锁:
				开销和加锁时间界于表锁和行锁之间;会出现死锁;锁定粒度界于表锁和行锁之间，并发度一般。 
				仅限于了解。



